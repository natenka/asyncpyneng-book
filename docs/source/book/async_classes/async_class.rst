Создание классов с asyncio
==========================

В целом асинхронные классы пишутся так же, как синхронные, но есть несколько
отличий:

* особенности работы ``__init__``
* некоторые специальные методы имеют отдельные версии для асинхронных классов,
  например, ``__aenter__``, ``__aexit__``, ``__anext__``, ``__aiter__``


Методы класса могут быть сопрограммами или обычными функциями.

Метод __init__
---------------

В синхронном варианте, если создавать класс который подключается
по SSH, то само подключение обычно будет выполняться в методе ``__init__``.
В асинхронных классах так сделать не получится, так как для выполнения
подключения в ``__init__``, надо сделать init сопрограммой. Так как init
должен возвращать None, если сделать init сопрограммой, возникнет ошибка:

.. code:: python

    In [3]: class ConnectSSH:
       ...:     async def __init__(self):
       ...:         await asyncio.sleep(0.1)
       ...:

    In [5]: r1 = ConnectSSH()
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-5-ceb9b33fd87d> in <module>
    ----> 1 r1 = ConnectSSH()

    TypeError: __init__() should return None, not 'coroutine'


Распространенный вариант решения проблемы - создание отдельного метода для подключения.
